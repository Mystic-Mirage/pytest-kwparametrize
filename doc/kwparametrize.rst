.. _`kwparametrizing-tests`:
.. _`kwparametrized test functions`:
.. _`kwparametrize`:

.. _`kwparametrize-basics`:

Parametrizing fixtures and test functions using ``kwparametrize``
==========================================================================

.. _kwparametrizemark:
.. _`@pytest.mark.kwparametrize`:

``@pytest.mark.kwparametrize``: parametrizing test functions
---------------------------------------------------------------------

The :ref:`pytest.mark.kwparametrize ref` decorator enables simplified
parametrization of arguments for a test function.  Here is a typical example
of a test function that implements checking that a certain input leads
to an expected output:

.. literalinclude:: test_expectation.py
   :language: python

Here, the ``@kwparametrize`` decorator defines three different test parameter
dictionaries so that the ``test_eval`` function will run three times using
them in turn:

.. code-block:: pytest

    $ pytest
    =========================== test session starts ============================
    platform linux -- Python 3.x.y, pytest-6.x.y, py-1.x.y, pluggy-0.x.y
    rootdir: pytest-kwparametrize
    plugins: kwparametrize-x.y.z
    collected 3 items

    test_expectation.py ..x                                              [100%]

    ======================= 2 passed, 1 xfailed in 0.12s =======================

.. note::

    Parameter values are passed as-is to tests (no copy whatsoever).

    For example, if you pass a list or a dict as a parameter value, and
    the test case code mutates it, the mutations will be reflected in subsequent
    test case calls.

As designed in this example, only one pair of input/output values fails
the simple test function.  And as usual with test function arguments,
you can see the ``input`` and ``output`` values in the traceback.

Note that you could also use the kwparametrize marker on a class or a module
(see :ref:`mark`) which would invoke several functions with the argument sets.

In case the values provided to ``kwparametrize`` result in an empty list - for
example, if they're dynamically generated by some function - the behaviour of
pytest is defined by the :confval:`empty_parameter_set_mark` option.

To get all combinations of multiple parametrized arguments you can stack
``kwparametrize`` decorators:

.. literalinclude:: test_combinations.py
   :language: python

This will run the test with the arguments set to ``x=0/y=2``, ``x=1/y=2``,
``x=0/y=3``, and ``x=1/y=3`` exhausting parameters in the order of the decorators.

More examples
-------------

For further examples, you might want to look at :ref:`more
parametrization examples <kwparamexamples>`.